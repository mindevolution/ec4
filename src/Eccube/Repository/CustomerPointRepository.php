<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository;

use Eccube\Entity\CustomerPoint;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * CustomerPointRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerPointRepository extends AbstractRepository
{
    /**
     * CustomerPointRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, CustomerPoint::class);
    }

    /**
     * お届け先を削除します.
     *
     * @param \Eccube\Entity\CustomerPoint $CustomerPoint
     */
    public function delete($CustomerPoint)
    {
        $em = $this->getEntityManager();
        $em->remove($CustomerPoint);
        $em->flush($CustomerPoint);
    }
    
    /**
     * @param int $id
     *
     * @return CustomerPoint
     */
    public function get($id = 1)
    {
        $CustomerPoint = $this->find($id);

        if (null === $CustomerPoint) {
            throw new \Exception('CustomerPoint not found. id = '.$id);
        }

        return $this->find($id);
    }

    /**
     * @param  \Eccube\Entity\Customer $Customer
     *
     * @return CustomerPoint
     */

    public function getCustomerPointByCustomer(\Eccube\Entity\Customer $Customer)
    {     
        try {    
            $qb = $this->createQueryBuilder('cfp')
            ->where('cfp.Customer = :Customer')
            ->setParameter('Customer', $Customer);
            return $qb->getQuery()->getResult();
        }
        catch (\Doctrine\Orm\NoResultException $e) {   
              return null;
        }


    }

    /**
     * @param  \Eccube\Entity\Order $Order
     *
     * @return CustomerPoint
     */

    public function getCustomerPointByOrder(\Eccube\Entity\Order $Order)
    {     
        try {    
            $qb = $this->createQueryBuilder('cfp')
            ->where('cfp.Order = :Order')
            ->setParameter('Order', $Order);
            return $qb->getQuery()->getSingleResult();
        }
        catch (\Doctrine\Orm\NoResultException $e) {   
              return null;
        }


    }


}
