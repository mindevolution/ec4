<?php

namespace Plugin\SoftbankPayment4\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Eccube\Entity\Order;
use Eccube\Entity\Master\OrderStatus;
use Eccube\Repository\AbstractRepository;
use Plugin\SoftbankPayment4\Entity\SbpsTrade;
use Plugin\SoftbankPayment4\Entity\Master\PayMethodType;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * SbpsTradingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SbpsTradeRepository extends AbstractRepository
{
    /**
     * @var EntityManagerInterface
     */
    private $em;

    /**
     * SbpsTradingRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param EntityManagerInterface $em
     */
    public function __construct(RegistryInterface $registry, EntityManagerInterface $em)
    {
        parent::__construct($registry, SbpsTrade::class);
        $this->em = $em;
    }

    public function createQueryBuilderForManageTrade($searchData)
    {
        // SBPS支払方法一覧を取得.
        if (!empty($searchData['pay_methods']) && count($searchData['pay_methods']) > 0) {
            $payMethods = PayMethodType::getClassesByCodes($searchData['pay_methods']);
        } else {
            $payMethods = array_values(PayMethodType::$class);    // SBPSの全決済方法を対象とする.
        }

        $qb = $this->em->createQueryBuilder();
        $qb->select('o')
            ->from(Order::class, 'o')
            ->orderBy('o.order_date', 'DESC')
            ->addOrderBy('o.id', 'DESC')

            //　決済方法で絞り込み
            ->leftJoin('o.Payment', 'op')
            ->andWhere($qb->expr()->in('op.method_class', ':method_class'))
            ->setParameter('method_class', $payMethods);
        
        // SbpsTradeが紐付いている
        $qb ->leftJoin('o.SbpsTrade', 'st')
            ->andWhere('st.id IS NOT NULL');

        // 検索条件が指定されている場合
        if (!empty($searchData['status']) && count($searchData['status']) > 0) {
            $qb->andWhere($qb->expr()->in('o.OrderStatus', ':OrderStatuses'))
                ->setParameter('OrderStatuses', $searchData['status']);    // 検索条件に指定された対応状況
        } else {
            $qb->andWhere($qb->expr()->notIn('o.OrderStatus', ':OrderStatuses'))
                ->setParameter('OrderStatuses', [Orderstatus::PROCESSING, OrderStatus::PENDING]);    // 決済処理中と購入処理中を除く.
        }

        return $qb;
    }
}
